const jwt = require("jsonwebtoken");
const dotenv = require("dotenv");
dotenv.config();

const authMiddleware = (req, res, next) => {
  // Extract the token from the Authorization header
  const token = req.headers["authorization"]?.split(" ")[1];

  if (!token) {
    return res.status(401).json({ msg: "Authorization denied. No token provided." });
  }

  try {
    // Verify the token
   const decoded= jwt.verify(token, process.env.JWT_SECRET_KEY)  
     console.log(`decoded`,decoded)
      if (decoded) {
        req.user = decoded;  
       

      
    }
    next();
    
  } catch (error) {
    console.error(error);
    return res.status(500).json({ msg: "Server error." });
  }
};

module.exports = authMiddleware;

//cart

const express = require("express");
const Cart = require("../models/cart.model.js");
const Product = require("../models/product.model.js");

const getCartItems = async (req, res) => {
  const userId = req.user.userId;
  console.log(`get`,userId)
  try {
    const cart = await Cart.findOne({ userId }).populate("products.productId");

    if (!cart) {
      return res.status(404).json({ msg: "Cart not found" });
    }

    const cartData = cart.products.map(item => ({
      productName: item.productId.name,
      price: item.productId.price,
      quantity: item.quantity,
      _id: item.productId._id,
    }));

    res.status(200).json(cartData);
  } catch (error) {
    console.error(error);
    res.status(500).json({ msg: "Server error", error: error.message });
  }
};

const addToCart = async (req, res) => {
  console.log("User object:", req.user);
  const { productId, quantity } = req.body;
  const userId = req.user.userId;
  console.log(`userId:-`, userId)

  if (!productId || !quantity || quantity <= 0) {
    return res.status(400).json({ msg: "Valid product ID and positive quantity are required" });
  }

  try {
    const product = await Product.findById(productId);
    if (!product) {
      return res.status(404).json({ msg: "Product not found" });
    }

    if (product.stock < quantity) {
      return res.status(400).json({ msg: "Not enough stock" });
    }

    let cart = await Cart.findOne({ userId });

    if (!cart) {
      // Create a new cart if one doesn't exist
      cart = new Cart({ userId, products: [{ productId, quantity }] });
      await cart.save();
    } else {
      // Update existing cart
      const existingProduct = cart.products.find(p => p.productId.toString() === productId);
      if (existingProduct) {
        existingProduct.quantity += quantity; // Update quantity if the product is already in the cart
      } else {
        cart.products.push({ productId, quantity }); // Add new product to cart
      }
      await cart.save();
    }

    res.status(200).json({ msg: "Product added to cart", cart });
  } catch (error) {
    console.error(error);
    res.status(500).json({ msg: "Server error", error: error.message });
  }
};

module.exports = { getCartItems, addToCart };
